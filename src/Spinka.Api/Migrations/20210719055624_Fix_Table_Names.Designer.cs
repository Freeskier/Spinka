// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Spinka.Infrastructure.Database;

namespace Spinka.Api.Migrations
{
    [DbContext(typeof(SpinkaContext))]
    [Migration("20210719055624_Fix_Table_Names")]
    partial class Fix_Table_Names
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Spinka.Domain.Models.Ammo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmmoTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDangerous")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LogIndex")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AmmoTypeId");

                    b.HasIndex("MeasureUnitId");

                    b.ToTable("Ammo");
                });

            modelBuilder.Entity("Spinka.Domain.Models.AmmoTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmmoAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("AmmoTransactionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentAmmoLimitsForDepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("TransactionDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 7, 19, 7, 56, 22, 904, DateTimeKind.Local).AddTicks(5859));

                    b.HasKey("Id");

                    b.HasIndex("AmmoTransactionTypeId");

                    b.HasIndex("CurrentAmmoLimitsForDepartmentId");

                    b.ToTable("AmmoTransactions");
                });

            modelBuilder.Entity("Spinka.Domain.Models.AmmoTransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("AmmoTransactionTypes");
                });

            modelBuilder.Entity("Spinka.Domain.Models.AmmoType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AmmoTypes");
                });

            modelBuilder.Entity("Spinka.Domain.Models.AssignedAmmo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmmoId")
                        .HasColumnType("int");

                    b.Property<int>("EduBlockId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AmmoId");

                    b.HasIndex("EduBlockId");

                    b.ToTable("AssignedAmmo");
                });

            modelBuilder.Entity("Spinka.Domain.Models.AssignedAssistantInstructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EduBlockId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EduBlockId");

                    b.HasIndex("PersonId");

                    b.ToTable("AssignedAssistantInstructors");
                });

            modelBuilder.Entity("Spinka.Domain.Models.AssignedAvailabilityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AvailabilityRoleId")
                        .HasColumnType("int");

                    b.Property<int>("AvailabilityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DayRepId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityTypeId");

                    b.HasIndex("DayRepId");

                    b.ToTable("AssignedAvailabilityTypes");
                });

            modelBuilder.Entity("Spinka.Domain.Models.AssignedPersonToMedicalService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("MedicalServiceForEduBlockId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalServiceForEduBlockId");

                    b.HasIndex("PersonId");

                    b.ToTable("AssignedPersonToMedicalServices");
                });

            modelBuilder.Entity("Spinka.Domain.Models.AssignedTrainingFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovedByPersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ApprovedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 7, 19, 7, 56, 22, 996, DateTimeKind.Local).AddTicks(8900));

                    b.Property<int>("EduBlockId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainingFacilityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EduBlockId");

                    b.HasIndex("TrainingFacilityId");

                    b.ToTable("AssignedTrainingFacilities");
                });

            modelBuilder.Entity("Spinka.Domain.Models.AssignedTrainingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EduBlockId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("TrainingGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EduBlockId");

                    b.HasIndex("TrainingGroupId");

                    b.ToTable("AssignedTrainingGroups");
                });

            modelBuilder.Entity("Spinka.Domain.Models.AssignedVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EduBlockId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EduBlockId");

                    b.HasIndex("VehicleId");

                    b.ToTable("AssignedVehicles");
                });

            modelBuilder.Entity("Spinka.Domain.Models.AuthorizationsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AuthorizationsTypes");
                });

            modelBuilder.Entity("Spinka.Domain.Models.AuxPersonForEduBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EduBlockId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EduBlockId");

                    b.HasIndex("PersonId");

                    b.ToTable("AuxPersonForEduBlocks");
                });

            modelBuilder.Entity("Spinka.Domain.Models.AvailabilityRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AvailabilityRoles");
                });

            modelBuilder.Entity("Spinka.Domain.Models.AvailabilityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("AvailabilityTypes");
                });

            modelBuilder.Entity("Spinka.Domain.Models.CurrentAmmoLimitsForDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActualizationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 7, 19, 7, 56, 23, 69, DateTimeKind.Local).AddTicks(3984));

                    b.Property<int?>("AmmoId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("UnitDepartmentsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AmmoId");

                    b.HasIndex("UnitDepartmentsId");

                    b.ToTable("CurrentAmmoLimitsForDepartments");
                });

            modelBuilder.Entity("Spinka.Domain.Models.DayRep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Day")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 7, 19, 7, 56, 23, 97, DateTimeKind.Local).AddTicks(5708));

                    b.Property<int?>("DayRepAcronymId")
                        .HasColumnType("int");

                    b.Property<int>("DayRepGroupPersonId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 7, 19, 7, 56, 23, 98, DateTimeKind.Local).AddTicks(9488));

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("DayRepAcronymId");

                    b.HasIndex("DayRepGroupPersonId");

                    b.ToTable("DayReps");
                });

            modelBuilder.Entity("Spinka.Domain.Models.DayRepAcronym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.HasKey("Id");

                    b.ToTable("DayRepAcronyms");
                });

            modelBuilder.Entity("Spinka.Domain.Models.DayRepGroupPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupForDayRepId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelegated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupForDayRepId");

                    b.HasIndex("PersonId");

                    b.ToTable("DayRepGroupPersons");
                });

            modelBuilder.Entity("Spinka.Domain.Models.EduBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("AmmoManagerPersonId")
                        .HasColumnType("int");

                    b.Property<bool>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ApprovedByPersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedTime")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 7, 19, 7, 56, 23, 140, DateTimeKind.Local).AddTicks(813));

                    b.Property<string>("CancellingRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedByPersonId")
                        .HasColumnType("int");

                    b.Property<int?>("DriverPersonId1")
                        .HasColumnType("int");

                    b.Property<int?>("DriverPersonId2")
                        .HasColumnType("int");

                    b.Property<int>("EduBlockSubjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExplosivesManagerPersonId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorPersonId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMedicalServiceRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastUpdatePersonId")
                        .HasColumnType("int");

                    b.Property<int?>("MajorEventId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalServiceForEduBlockId")
                        .HasColumnType("int");

                    b.Property<int?>("SecurityPersonId")
                        .HasColumnType("int");

                    b.Property<int?>("ShootingInstructorPersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrainingFacility")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EduBlockSubjectId");

                    b.HasIndex("MajorEventId");

                    b.HasIndex("MedicalServiceForEduBlockId")
                        .IsUnique()
                        .HasFilter("[MedicalServiceForEduBlockId] IS NOT NULL");

                    b.ToTable("EduBlocks");
                });

            modelBuilder.Entity("Spinka.Domain.Models.EduBlockControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbsenceReason")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AdminLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Attended")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("EduBlockId")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastTimeModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 7, 19, 7, 56, 23, 156, DateTimeKind.Local).AddTicks(7657));

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("EduBlockId");

                    b.ToTable("EduBlockControls");
                });

            modelBuilder.Entity("Spinka.Domain.Models.EduBlockSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("TrainingAreaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingAreaId");

                    b.ToTable("EduBlockSubjects");
                });

            modelBuilder.Entity("Spinka.Domain.Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acr")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("Spinka.Domain.Models.FunctionForEduBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("FunctionForEduBlocks");
                });

            modelBuilder.Entity("Spinka.Domain.Models.GroupForDayRep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("UnitDepartmentsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitDepartmentsId");

                    b.ToTable("GroupForDayReps");
                });

            modelBuilder.Entity("Spinka.Domain.Models.MajorEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("StartOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UnitDepartmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("UnitDepartmentId");

                    b.ToTable("MajorEvents");
                });

            modelBuilder.Entity("Spinka.Domain.Models.MeasureUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("MeasureUnits");
                });

            modelBuilder.Entity("Spinka.Domain.Models.MedicalServiceForEduBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmbulanceVehicleId")
                        .HasColumnType("int");

                    b.Property<int>("DriverPersonId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("AmbulanceVehicleId")
                        .IsUnique();

                    b.ToTable("MedicalServiceForEduBlocks");
                });

            modelBuilder.Entity("Spinka.Domain.Models.MilitaryRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcrRankEn")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("AcrRankPl")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("FullRankEn")
                        .HasColumnType("nvarchar(35)")
                        .HasMaxLength(35);

                    b.Property<string>("FullRankPl")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<int>("Grading")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Nato")
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.HasKey("Id");

                    b.ToTable("MilitaryRanks");
                });

            modelBuilder.Entity("Spinka.Domain.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Father")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("MilitaryRankId")
                        .HasColumnType("int");

                    b.Property<int>("OpNo")
                        .HasColumnType("int");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("MilitaryRankId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Spinka.Domain.Models.PersonAuthorisedForEduBlockFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorisationsTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorisationsTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAuthorisedForEduBlockFunctions");
                });

            modelBuilder.Entity("Spinka.Domain.Models.PersonAuthorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorizationTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAuthorizations");
                });

            modelBuilder.Entity("Spinka.Domain.Models.ProcedureModels.DayRepCalendarForGroupProcedure", b =>
                {
                    b.Property<int?>("Day1")
                        .HasColumnType("int");

                    b.Property<int?>("Day10")
                        .HasColumnType("int");

                    b.Property<int?>("Day11")
                        .HasColumnType("int");

                    b.Property<int?>("Day12")
                        .HasColumnType("int");

                    b.Property<int?>("Day13")
                        .HasColumnType("int");

                    b.Property<int?>("Day14")
                        .HasColumnType("int");

                    b.Property<int?>("Day2")
                        .HasColumnType("int");

                    b.Property<int?>("Day3")
                        .HasColumnType("int");

                    b.Property<int?>("Day4")
                        .HasColumnType("int");

                    b.Property<int?>("Day5")
                        .HasColumnType("int");

                    b.Property<int?>("Day6")
                        .HasColumnType("int");

                    b.Property<int?>("Day7")
                        .HasColumnType("int");

                    b.Property<int?>("Day8")
                        .HasColumnType("int");

                    b.Property<int?>("Day9")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonInGroupId")
                        .HasColumnType("int");

                    b.ToTable("DayRepCalendarForGroupProcedures");
                });

            modelBuilder.Entity("Spinka.Domain.Models.ProcedureModels.DayRepCalendarForGroupProcedureText", b =>
                {
                    b.Property<string>("Day1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day14")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonInGroupId")
                        .HasColumnType("int");

                    b.ToTable("DayRepCalendarForGroupProcedureText");
                });

            modelBuilder.Entity("Spinka.Domain.Models.ProcedureModels.DayRepNumbersForGroupInnerDashBoardProcedure", b =>
                {
                    b.Property<string>("DayRepValueDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DayRepValueFull")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DayRepValueLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DayRepValueName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MilitaryRankPl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonOpNo")
                        .HasColumnType("int");

                    b.ToTable("DayRepNumbersForGroupInnerDashBoardProcedure");
                });

            modelBuilder.Entity("Spinka.Domain.Models.TrainingArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TrainingAreas");
                });

            modelBuilder.Entity("Spinka.Domain.Models.TrainingFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TrainingFacilities");
                });

            modelBuilder.Entity("Spinka.Domain.Models.TrainingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("TrainingGroups");
                });

            modelBuilder.Entity("Spinka.Domain.Models.TrainingGroupsInDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("TrainingGroupId")
                        .HasColumnType("int");

                    b.Property<int>("UnitDepartmentsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingGroupId");

                    b.HasIndex("UnitDepartmentsId");

                    b.ToTable("TrainingGroupsInDepartments");
                });

            modelBuilder.Entity("Spinka.Domain.Models.TrainingGroupsPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TrainingGroupId");

                    b.ToTable("TrainingGroupsPersons");
                });

            modelBuilder.Entity("Spinka.Domain.Models.UnitDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("UnitDepartments");
                });

            modelBuilder.Entity("Spinka.Domain.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(35)")
                        .HasMaxLength(35);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RegisterNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Spinka.Domain.Models.Ammo", b =>
                {
                    b.HasOne("Spinka.Domain.Models.AmmoType", "AmmoType")
                        .WithMany("Ammo")
                        .HasForeignKey("AmmoTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spinka.Domain.Models.MeasureUnit", "MeasureUnit")
                        .WithMany("Ammo")
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.AmmoTransaction", b =>
                {
                    b.HasOne("Spinka.Domain.Models.AmmoTransactionType", "AmmoTransactionType")
                        .WithMany("AmmoTransactions")
                        .HasForeignKey("AmmoTransactionTypeId");

                    b.HasOne("Spinka.Domain.Models.CurrentAmmoLimitsForDepartment", "CurrentAmmoLimitsForDepartment")
                        .WithMany("AmmoTransactions")
                        .HasForeignKey("CurrentAmmoLimitsForDepartmentId");
                });

            modelBuilder.Entity("Spinka.Domain.Models.AssignedAmmo", b =>
                {
                    b.HasOne("Spinka.Domain.Models.Ammo", "Ammo")
                        .WithMany("AssignedAmmo")
                        .HasForeignKey("AmmoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spinka.Domain.Models.EduBlock", "EduBlock")
                        .WithMany("AssignedAmmo")
                        .HasForeignKey("EduBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.AssignedAssistantInstructor", b =>
                {
                    b.HasOne("Spinka.Domain.Models.EduBlock", "EduBlock")
                        .WithMany("AssistantInstructors")
                        .HasForeignKey("EduBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spinka.Domain.Models.Person", "Person")
                        .WithMany("AssistantInstructors")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.AssignedAvailabilityType", b =>
                {
                    b.HasOne("Spinka.Domain.Models.AvailabilityType", "AvailabilityType")
                        .WithMany("AssignedAvailabilityTypes")
                        .HasForeignKey("AvailabilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spinka.Domain.Models.DayRep", "DayRep")
                        .WithMany("AssignedAvailabilityTypes")
                        .HasForeignKey("DayRepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.AssignedPersonToMedicalService", b =>
                {
                    b.HasOne("Spinka.Domain.Models.MedicalServiceForEduBlock", "MedicalServiceForEduBlock")
                        .WithMany("MedicalStaff")
                        .HasForeignKey("MedicalServiceForEduBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spinka.Domain.Models.Person", "Person")
                        .WithMany("MedicalStaff")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.AssignedTrainingFacility", b =>
                {
                    b.HasOne("Spinka.Domain.Models.EduBlock", "EduBlock")
                        .WithMany("AssignedTrainingFacilities")
                        .HasForeignKey("EduBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spinka.Domain.Models.TrainingFacility", "TrainingFacility")
                        .WithMany("AssignedTrainingFacilities")
                        .HasForeignKey("TrainingFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.AssignedTrainingGroup", b =>
                {
                    b.HasOne("Spinka.Domain.Models.EduBlock", "EduBlock")
                        .WithMany("AssignedTrainingGroups")
                        .HasForeignKey("EduBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spinka.Domain.Models.TrainingGroup", "TrainingGroup")
                        .WithMany("AssignedTrainingGroups")
                        .HasForeignKey("TrainingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.AssignedVehicle", b =>
                {
                    b.HasOne("Spinka.Domain.Models.EduBlock", "EduBlock")
                        .WithMany("AssignedVehicles")
                        .HasForeignKey("EduBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spinka.Domain.Models.Vehicle", "Vehicle")
                        .WithMany("AssignedVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.AuxPersonForEduBlock", b =>
                {
                    b.HasOne("Spinka.Domain.Models.EduBlock", "EduBlock")
                        .WithMany("AuxPersons")
                        .HasForeignKey("EduBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spinka.Domain.Models.Person", "Person")
                        .WithMany("AuxPersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.CurrentAmmoLimitsForDepartment", b =>
                {
                    b.HasOne("Spinka.Domain.Models.Ammo", "Ammo")
                        .WithMany("CurrentAmmoLimitsForDepartments")
                        .HasForeignKey("AmmoId");

                    b.HasOne("Spinka.Domain.Models.UnitDepartment", "UnitDepartment")
                        .WithMany("CurrentAmmoLimitsForDepartments")
                        .HasForeignKey("UnitDepartmentsId");
                });

            modelBuilder.Entity("Spinka.Domain.Models.DayRep", b =>
                {
                    b.HasOne("Spinka.Domain.Models.DayRepAcronym", "DayRepAcronym")
                        .WithMany("DayReps")
                        .HasForeignKey("DayRepAcronymId");

                    b.HasOne("Spinka.Domain.Models.DayRepGroupPerson", "DayRepGroupPerson")
                        .WithMany("DayReps")
                        .HasForeignKey("DayRepGroupPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.DayRepGroupPerson", b =>
                {
                    b.HasOne("Spinka.Domain.Models.GroupForDayRep", "GroupForDayRep")
                        .WithMany("DayRepGroupPersons")
                        .HasForeignKey("GroupForDayRepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spinka.Domain.Models.Person", "Person")
                        .WithMany("DayRepGroupPersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.EduBlock", b =>
                {
                    b.HasOne("Spinka.Domain.Models.EduBlockSubject", "EduBlockSubject")
                        .WithMany("EduBlocks")
                        .HasForeignKey("EduBlockSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spinka.Domain.Models.MajorEvent", "MajorEvent")
                        .WithMany("EduBlocks")
                        .HasForeignKey("MajorEventId");

                    b.HasOne("Spinka.Domain.Models.MedicalServiceForEduBlock", "MedicalServiceForEduBlock")
                        .WithOne("EduBlock")
                        .HasForeignKey("Spinka.Domain.Models.EduBlock", "MedicalServiceForEduBlockId");
                });

            modelBuilder.Entity("Spinka.Domain.Models.EduBlockControl", b =>
                {
                    b.HasOne("Spinka.Domain.Models.EduBlock", "EduBlock")
                        .WithMany("EduBlockControls")
                        .HasForeignKey("EduBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spinka.Domain.Models.Person", "Person")
                        .WithMany("EduBlockControls")
                        .HasForeignKey("EduBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.EduBlockSubject", b =>
                {
                    b.HasOne("Spinka.Domain.Models.TrainingArea", "TrainingArea")
                        .WithMany("EduBlockSubjects")
                        .HasForeignKey("TrainingAreaId");
                });

            modelBuilder.Entity("Spinka.Domain.Models.GroupForDayRep", b =>
                {
                    b.HasOne("Spinka.Domain.Models.UnitDepartment", "UnitDepartment")
                        .WithMany("GroupForDayReps")
                        .HasForeignKey("UnitDepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.MajorEvent", b =>
                {
                    b.HasOne("Spinka.Domain.Models.EventType", "EventType")
                        .WithMany("MajorEvents")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spinka.Domain.Models.UnitDepartment", "UnitDepartment")
                        .WithMany("MajorEvents")
                        .HasForeignKey("UnitDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.MedicalServiceForEduBlock", b =>
                {
                    b.HasOne("Spinka.Domain.Models.Vehicle", "Vehicle")
                        .WithOne("MedicalServiceForEduBlock")
                        .HasForeignKey("Spinka.Domain.Models.MedicalServiceForEduBlock", "AmbulanceVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.Person", b =>
                {
                    b.HasOne("Spinka.Domain.Models.MilitaryRank", "MilitaryRank")
                        .WithMany("Persons")
                        .HasForeignKey("MilitaryRankId");
                });

            modelBuilder.Entity("Spinka.Domain.Models.PersonAuthorisedForEduBlockFunction", b =>
                {
                    b.HasOne("Spinka.Domain.Models.AuthorizationsType", "AuthorizationsType")
                        .WithMany("PersonAuthorisedForEduBlockFunctions")
                        .HasForeignKey("AuthorisationsTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spinka.Domain.Models.Person", "Person")
                        .WithMany("PersonAuthorisedForEduBlockFunctions")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.PersonAuthorization", b =>
                {
                    b.HasOne("Spinka.Domain.Models.AuthorizationsType", "AuthorizationsType")
                        .WithMany("PersonAuthorizations")
                        .HasForeignKey("AuthorizationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spinka.Domain.Models.Person", "Person")
                        .WithMany("PersonAuthorizations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.TrainingGroupsInDepartment", b =>
                {
                    b.HasOne("Spinka.Domain.Models.TrainingGroup", "TrainingGroup")
                        .WithMany("TrainingGroupsInDepartments")
                        .HasForeignKey("TrainingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spinka.Domain.Models.UnitDepartment", "UnitDepartment")
                        .WithMany("TrainingGroupsInDepartments")
                        .HasForeignKey("UnitDepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spinka.Domain.Models.TrainingGroupsPerson", b =>
                {
                    b.HasOne("Spinka.Domain.Models.Person", "Person")
                        .WithMany("PersonInTrainingGroups")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spinka.Domain.Models.TrainingGroup", "TrainingGroup")
                        .WithMany("TrainingGroupsPersons")
                        .HasForeignKey("TrainingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
